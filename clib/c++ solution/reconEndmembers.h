#pragma once
#include "reconCommon.h"

// Generic interface used by all continental reconstruction models
// 
class Endmembers {
protected:
	double t;
	virtual void RecalcEM() = 0;
	Endmembers(size_t N_endmembers);
	void CalculateMeanAndRatioErrorsForDB(RockSample& rock, const RockDatabase& db, std::vector<double>& errR);
	void CalculateWeightedMeanAndRatioErrorsForDB(RockSample& rock, const RockDatabase& db, std::vector<double>& errR);
public:
	const size_t N_e; //Number of endmembers
	std::vector<std::string> Ename;
	std::vector<RockSample> E;
	std::vector<std::vector<double>> ratioErr;
	std::vector<MemberOffset<RockSample, double>> ratioErr_Nmntr;
	std::vector<MemberOffset<RockSample, double>> ratioErr_Dnmtr;
	void RegisterRatioError(MemberOffset<RockSample, double> nominator, MemberOffset<RockSample, double> denominator);
	void RecalculateForTime(double t);
	virtual std::vector<RockDatabase> ExportSamples() = 0;
	virtual ~Endmembers();
	static RockDatabase CreateAgeUniformDatabase(const RockDatabase& inDB, double width);
};

// One set of end-members in the Archaean, one set in the modern, with a given interpolation range
// 
class DualEndmembers : public Endmembers {
	RockDatabase ignKeller;
	RockDatabase ignModernNoMORB;
	bool loaded;
	double transition_width;
	double transition_centre;
	std::string configScript;

	std::vector<RockSample> E_Arch;
	std::vector<RockSample> E_Mdrn;
	std::vector<RockDatabase> DB_Arch;
	std::vector<RockDatabase> DB_Mdrn;

	std::vector<std::vector<double>> ratioErr_Arch;
	std::vector<std::vector<double>> ratioErr_Mdrn;

	void GenE();

	double TransitionParameter(double t) const; //Proportion of modern material

public:
	std::vector<RockDatabase> ExportSamples() override;
	void RecalcEM() override;
	DualEndmembers(const std::string& configScript,
				   const RockDatabase & IGN_KELLER, const RockDatabase & IGN_NOMORB,
				   double TRANS_CENTRE = 2500.0, double TRANS_WIDTH = 500.0);
};

// Endmembers at time t generated by averaging all rocks which are older than t,
// but no more than kernel_length years.
class CumulativeEndmembers : public Endmembers {
protected:
	std::string configScript;
	std::vector<RockDatabase> fullDB;
	std::vector<RockDatabase> timeDB;
	double kernel_length;
	bool needToLoadK;

public:
	void RecalcEM() override;
	CumulativeEndmembers(const std::string& configScript, const RockDatabase& kellerDB, const RockDatabase& noOceanDB, double kernel_length, double sampling_width);
	std::vector<RockDatabase> ExportSamples() override;
};

// Special-case version of the above, with an infinite kernel length.
// Effectively considers ALL rocks that came before.
class ContinuousEndmembers : public CumulativeEndmembers {
public:
	ContinuousEndmembers(const std::string& configScript, const RockDatabase& kellerDB, const RockDatabase& noOceanDB, double agebinWidth)
		: CumulativeEndmembers(configScript, kellerDB, noOceanDB, NAN, agebinWidth) {};
};

// A variant of cumulative endmembers which uses an exponential
// smoothing kernel instead of a Heaviside kernel.
class ExponentialEndmembers : public ContinuousEndmembers {
	double samplingWidth;
public:
	void RecalcEM() override;
	ExponentialEndmembers(const std::string& configScript, const RockDatabase& kellerDB, const RockDatabase& noOceanDB, double agebinWidth, double kernelWidth)
		: ContinuousEndmembers(configScript, kellerDB, noOceanDB, agebinWidth), samplingWidth(kernelWidth) {};
};

// A variant of cumulative endmembers which uses a symmetric
// unit function kernel instead of a Heaviside kernel.
class FuturePastEndmembers : public ContinuousEndmembers {
	double samplingWidth;
public:
	void RecalcEM() override;
	FuturePastEndmembers(const std::string& configScript, const RockDatabase& kellerDB, const RockDatabase& noOceanDB, double agebinWidth, double kernelWidth)
		: ContinuousEndmembers(configScript, kellerDB, noOceanDB, agebinWidth), samplingWidth(kernelWidth) {};
};

// Endmembers generated by bootstrapping the appropriate igneous databases
// using the WRB bootstrap method, with a configured kernel width.
class BoMembers : public ContinuousEndmembers {
	std::vector<std::vector<WRB_Result>> bootEl;
	std::vector<std::vector<WRB_Result>> bootR;
	void GenerateBootstraps(size_t start_idx);
	double bootKernelWidth;
public:
	void RecalcEM() override;
	BoMembers(const std::string& configScript, const RockDatabase & IGN_KELLER, const RockDatabase & IGN_NOMORB, double BOOT_KERNEL_WIDTH = 500.0)
		: ContinuousEndmembers(configScript, IGN_KELLER, IGN_NOMORB, 999999.9), bootKernelWidth(BOOT_KERNEL_WIDTH) {};
};
